plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace "de.lifecapture.phonexrapp"

    compileSdkVersion 33
    lintOptions {
        abortOnError false
    }
    defaultConfig {
        applicationId "de.lifecapture.phonexrapp"
        // #gles3 #vulkan - You can reduce minSdkVersion down to 16 depending
        // on rendering APIs supported:
        //
        // OpenGL ES 2.0 - Requires 16 or higher
        // OpenGL ES 3.0 - Requires 18 or higher
        // Vulkan        - Requires 24 or higher
        //
        // See the release notes for details.
        minSdkVersion 24
        targetSdkVersion 32
        versionCode 1
        versionName '0.1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
        externalNativeBuild.cmake {
            arguments "-DANDROID_STL=c++_shared"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild.cmake {
        path "CMakeLists.txt"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.6.0'
    implementation 'androidx.core:core-ktx:1.9.0'
    // Android Mobile Vision
    // TODO(b/213613345) Migrate to ML Kit.
    // implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'com.google.protobuf:protobuf-javalite:3.19.4'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation project(":sdk")
}

// The dependencies for NDK builds live inside the .aar files so they need to
// be extracted before NDK targets can link against.
task extractNdk(type: Copy)  {
    if (file("${project.rootDir}/sdk/build/outputs/aar/sdk-release.aar").exists()) {
        copy {
            from zipTree("${project.rootDir}/sdk/build/outputs/aar/sdk-release.aar")
            into "libraries/"
            include "jni/**/libGfxPluginCardboard.so"
        }
        copy {
            from "${project.rootDir}/sdk/include/cardboard.h"
            into "libraries/"
        }
    }
}

task deleteNdk(type: Delete) {
    delete "libraries/jni"
    delete "libraries/cardboard.h"
}

build.dependsOn(extractNdk)
clean.dependsOn(deleteNdk)
